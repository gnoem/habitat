datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model User {
  id            String        @default(cuid()) @id
  name          String?
  email         String        @unique
  password      String?
  habits        Habit[]
  entries       Entry[]
  records       Record[]
  settings      Settings?
  @@map(name: "users")
}

model Settings {
  id                               String           @default(cuid()) @id
  dashboard__defaultView           String?          @default("list")
  habits__defaultView              String?          @default("list")
  habits__newHabitIcon             String?          @default("üêõ")
  appearance__showClock            Boolean?         @default(true)
  appearance__24hrClock            Boolean?         @default(false)
  appearance__showClockSeconds     Boolean?         @default(true)
  user                             User?            @relation(fields: [userId], references: [id])
  userId                           String?          @unique
  demoToken                        DemoToken?       @relation(fields: [demoTokenId], references: [id])
  demoTokenId                      String?          @unique
  @@map(name: "settings")
}

model Habit {
  id            String        @default(cuid()) @id
  name          String
  icon          String?
  color         String?
  label         String?
  complex       Boolean?
  retired       Boolean       @default(false)
  order         Int?
  records       Record[]
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?
  demoToken     DemoToken?    @relation(fields: [demoTokenId], references: [id])
  demoTokenId   String?
  @@map(name: "habits")
}

model Entry {
  id            String        @default(cuid()) @id
  date          String
  records       Record[]
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  demoToken     DemoToken?    @relation(fields: [demoTokenId], references: [id])
  demoTokenId   String?
  @@map(name: "entries")
}

model Record {
  id            String        @default(cuid()) @id
  habit         Habit?        @relation(fields: [habitId], references: [id])
  habitId       String?
  amount        Int?
  check         Boolean
  entry         Entry?        @relation(fields: [entryId], references: [id])
  entryId       String?
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?
  demoToken     DemoToken?    @relation(fields: [demoTokenId], references: [id])
  demoTokenId   String?
  @@map(name: "records")
}

model SignupToken {
  id            String        @default(cuid()) @id
  createdAt     DateTime      @default(now())
  @@map(name: "signupToken")
}

model PasswordToken {
  id            String        @default(cuid()) @id
  userId        String?       @unique
  createdAt     DateTime      @default(now())
  @@map(name: "passwordToken")
}

model DemoToken {
  id            String        @default(cuid()) @id
  habits        Habit[]
  entries       Entry[]
  records       Record[]
  settings      Settings?
  createdAt     DateTime      @default(now())
  @@map(name: "demoToken")
}